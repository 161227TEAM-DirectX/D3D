#pragma once

class quadTree;

class terrainSc
{
private:
	quadTree*						_quadTree;			//쿼드 트리
	LPDIRECT3DVERTEXBUFFER9			_terrainVb;			//지형 정점버퍼
	LPDIRECT3DINDEXBUFFER9			_terrainIb;			//지형 인덱스버퍼
	LPDIRECT3DVERTEXDECLARATION9	_terrainDecl;		//정점 정보선언
	LPTERRAINVERTEX					_terrainVertices;	//지형 정점정보
	LPD3DXEFFECT					_terrainEffect;		//지형 Effect
	LPDIRECT3DTEXTURE9				_heightMap;			//지형 높이맵 텍스쳐
	LPDIRECT3DTEXTURE9				_texTile_0;			//지형 3 층 타일 텍스쳐
	LPDIRECT3DTEXTURE9				_texSlat;			//스플렛팅 텍스쳐

	LPDIRECT3DTEXTURE9 _texDiffuse;
	LPDIRECT3DTEXTURE9 _texDetail;

	float _cellScale;				//셀 간격
	float _heightScale;				//높이 스케일(픽셀컬러가 255일때 높이)
	int _verNumX;					//가로 정점수
	int _verNumZ;					//깊이 정점수
	int _totalVerNum;				//전체 정점수
	int _cellNumX;					//가로 셀수
	int _cellNumZ;					//깊이 셀수
	int _totalCellNum;				//전체 셀수
	int _totalTriangle;				//전체 삼각형수
	float _terrainSizeX;			//지형 가로 사이즈
	float _terrainSizeZ;			//지형 세로 사이즈

									//정확한 높이 계산을 위해 필요한 변수들
	float _terrainStartX;			//지형 시작 위치X
	float _terrainStartZ;			//지형 시작 위치Z
	float _terrainEndX;				//지형 종료 위치X
	float _terrainEndZ;				//지형 종료 위치Z

	bool _isVtxRender;				//정점렌더 여부

	char* heightMAPText;

public:
	terrainSc() :_isVtxRender(false), _texDiffuse(NULL), _texDetail(NULL) {}
	~terrainSc() {}

	//지형2 초기화
	HRESULT init(
		char* heightMapName,		//높이맵 이름
		char* tile_0,				// 타일 이미지 3
		char * tileSplat,
		float cellSize,				// 하나의 셀크기
		float heightScale,			// 높이 스케일
		int smoothLevel,			// 스무싱 처리 횟수
		int tileNum);				// 타일링 갯수

									//지형1 초기화
	HRESULT initMap(
		int heightNumber,		//높이맵 이름
		int sizeX,
		int sizeZ,
		float cellSize,
		float heightScale,
		int smoothLevel,
		int tileNum);				//타일링 개수에 따라서 디테일맵이 그려진다.

	void terrainUpdate(int number);
	void terrainUpdate2(int detailNumber);

	void release(void);
	void render(camera* cam, lightDirection* directionLight);

	//Ray 히트 위치를 얻는다.
	bool isIntersectRay(D3DXVECTOR3* pOut, LPRay ray);

	//해당 X, Z 위치의 지형의 높이를 얻는다.
	float getHeight(float x, float z);

	//해당 X, Z 위치의 경사 벡터를 얻는다.
	bool getSlant(D3DXVECTOR3* pOut, float gravityPower, float x, float z);

	//높낮이 지정
	void setHeight(float x, float z, float delta = 0.1f);

	void render(int diffuseNumber, int detailNumber);
	void setVtxRender(bool isVtxRender=false) { this->_isVtxRender = isVtxRender; }

private:
	//지형클래스 내부에서만 사용할 함수
	//지형 정점 만들기
	HRESULT createTerrain(int smooth, int tileNum);
	//지형 스무싱
	void smoothTerrain(int passed);

};

